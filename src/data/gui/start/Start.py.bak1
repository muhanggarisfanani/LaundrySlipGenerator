#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 10, 2020 01:36:52 PM +07  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from PIL import Image, ImageTk

import Start_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    Start_support.set_Tk_var()
    top = BeginWindow (root)
    Start_support.init(root, top)
    root.mainloop()

w = None
def create_BeginWindow(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_BeginWindow(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    Start_support.set_Tk_var()
    top = BeginWindow (w)
    Start_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_BeginWindow():
    global w
    w.destroy()
    w = None

class BeginWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#ffffff'  # X11 color: 'white'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font12 = "-family {Segoe UI Black} -size 18 -weight bold"
        font9 = "-family {Segoe UI} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x768+0+0")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(0, 0)
        top.title("Welcome, Tropical Laundry Sangkuring")
        top.configure(background="#ffffff")

        self.ButtonGenerate = ttk.Button(top)
        self.ButtonGenerate.place(relx=0.666, rely=0.742, height=40, width=355)
        self.ButtonGenerate.configure(takefocus="")
        self.ButtonGenerate.configure(text='''GENERATE''')

        self.TFrameLogo = ttk.Frame(top)
        self.TFrameLogo.place(relx=0.081, rely=0.13, relheight=0.723
                , relwidth=0.538)
        self.TFrameLogo.configure(relief='groove')
        self.TFrameLogo.configure(borderwidth="2")
        self.TFrameLogo.configure(relief="groove")

        self.TLabelLogoImage = ttk.Label(self.TFrameLogo)
        self.TLabelLogoImage.place(relx=0.327, rely=0.378, height=264, width=216)

        self.TLabelLogoImage.configure(background="#ffffff")
        self.TLabelLogoImage.configure(foreground="#000000")
        self.TLabelLogoImage.configure(font=font9)
        self.TLabelLogoImage.configure(relief="flat")
        self.TLabelLogoImage.configure(anchor='w')
        self.TLabelLogoImage.configure(justify='left')
        photo_location = os.path.join(prog_location,"img/logo.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(file=photo_location)
        self.TLabelLogoImage.configure(image=_img0)

        self.TFrameTitle = ttk.Frame(self.TFrameLogo)
        self.TFrameTitle.place(relx=0.15, rely=0.144, relheight=0.171
                , relwidth=0.714)
        self.TFrameTitle.configure(relief='groove')
        self.TFrameTitle.configure(borderwidth="2")
        self.TFrameTitle.configure(relief="groove")

        self.TLabelTitle = ttk.Label(self.TFrameTitle)
        self.TLabelTitle.place(relx=0.038, rely=0.116, height=72, width=485)
        self.TLabelTitle.configure(background="#ffffff")
        self.TLabelTitle.configure(foreground="#000000")
        self.TLabelTitle.configure(font=font12)
        self.TLabelTitle.configure(relief="flat")
        self.TLabelTitle.configure(anchor='w')
        self.TLabelTitle.configure(justify='center')
        self.TLabelTitle.configure(text='''AUTO SALARY SLIP GENERATOR''')

        self.TButtonSettingImage = ttk.Button(top)
        self.TButtonSettingImage.place(relx=0.867, rely=0.13, height=74
                , width=74)
        self.TButtonSettingImage.configure(takefocus="")
        photo_location = os.path.join(prog_location,"img/setting.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.TButtonSettingImage.configure(image=_img1)

        self.TLabelframeCopyright = ttk.Labelframe(top)
        self.TLabelframeCopyright.place(relx=0.081, rely=0.872, relheight=0.059
                , relwidth=0.538)
        self.TLabelframeCopyright.configure(relief='')
        self.TLabelframeCopyright.configure(text='''Muhammad Angga Risfanani ~ copyrightÂ© 2020 Powered by Python3''')

        self.TLabelframeStatus = ttk.Labelframe(top)
        self.TLabelframeStatus.place(relx=0.666, rely=0.859, relheight=0.072
                , relwidth=0.26)
        self.TLabelframeStatus.configure(relief='')
        self.TLabelframeStatus.configure(text='''Status''')

        self.TLabelStatus = ttk.Label(self.TLabelframeStatus)
        self.TLabelStatus.place(relx=0.028, rely=0.364, height=27, width=333
                , bordermode='ignore')
        self.TLabelStatus.configure(background="#ffffff")
        self.TLabelStatus.configure(foreground="#000000")
        self.TLabelStatus.configure(font=font9)
        self.TLabelStatus.configure(relief="flat")
        self.TLabelStatus.configure(anchor='w')
        self.TLabelStatus.configure(justify='left')
        self.TLabelStatus.configure(textvariable=Start_support.LabelStatusVar)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.659, rely=0.833, relwidth=0.272)

        self.TLabelSettingH = ttk.Label(top)
        self.TLabelSettingH.place(relx=0.67, rely=0.138, height=63, width=265)
        self.TLabelSettingH.configure(background="#ffffff")
        self.TLabelSettingH.configure(foreground="#000000")
        self.TLabelSettingH.configure(font=font9)
        self.TLabelSettingH.configure(relief="flat")
        self.TLabelSettingH.configure(anchor='w')
        self.TLabelSettingH.configure(justify='left')
        photo_location = os.path.join(prog_location,"img/settingh.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.TLabelSettingH.configure(image=_img2)

        self.TSeparator1_1 = ttk.Separator(top)
        self.TSeparator1_1.place(relx=0.659, rely=0.253, relwidth=0.272)

        self.TLabelLoadInstruction = ttk.Label(top)
        self.TLabelLoadInstruction.place(relx=0.666, rely=0.286, height=33
                , width=355)
        self.TLabelLoadInstruction.configure(background="#ffffff")
        self.TLabelLoadInstruction.configure(foreground="#000000")
        self.TLabelLoadInstruction.configure(font=font9)
        self.TLabelLoadInstruction.configure(relief="flat")
        self.TLabelLoadInstruction.configure(anchor='w')
        self.TLabelLoadInstruction.configure(justify='left')
        self.TLabelLoadInstruction.configure(text='''Kamu harus memasukkan file absensi terlebih dahulu''')

        self.TButtonBrowseFile = ttk.Button(top)
        self.TButtonBrowseFile.place(relx=0.666, rely=0.339, height=30, width=98)

        self.TButtonBrowseFile.configure(takefocus="")
        self.TButtonBrowseFile.configure(text='''Browse''')

        self.TLabelPathFile = ttk.Label(top)
        self.TLabelPathFile.place(relx=0.747, rely=0.342, height=23, width=245)
        self.TLabelPathFile.configure(background="#ffffff")
        self.TLabelPathFile.configure(foreground="#000000")
        self.TLabelPathFile.configure(font=font9)
        self.TLabelPathFile.configure(relief="flat")
        self.TLabelPathFile.configure(anchor='w')
        self.TLabelPathFile.configure(justify='left')
        self.TLabelPathFile.configure(textvariable=Start_support.LabelPathFileVar)

        self.TLabelframePanduan = ttk.Labelframe(top)
        self.TLabelframePanduan.place(relx=0.666, rely=0.404, relheight=0.32
                , relwidth=0.26)
        self.TLabelframePanduan.configure(relief='flat')
        self.TLabelframePanduan.configure(text='''Panduan''')
        self.TLabelframePanduan.configure(relief="flat")

        self.TLabelPanduanChild = ttk.Label(self.TLabelframePanduan)
        self.TLabelPanduanChild.place(relx=0.028, rely=0.126, height=202
                , width=335, bordermode='ignore')
        self.TLabelPanduanChild.configure(background="#ffffff")
        self.TLabelPanduanChild.configure(foreground="#000000")
        self.TLabelPanduanChild.configure(font=font9)
        self.TLabelPanduanChild.configure(relief="flat")
        self.TLabelPanduanChild.configure(anchor='w')
        self.TLabelPanduanChild.configure(justify='left')
        self.TLabelPanduanChild.configure(text='''1. Pastikan file yang akan dimasukkan dalam
    format excel (xlx/xlsx) Monthly Report
    serta sudah mengatur konfigurasi setting,
2. Tekan tombol "Browse" di atas untuk mencari
    file,
3. Lalu pilih karyawan yang akan di-generate slip
    gajinya (Peringatan! Jangan men-generate slip
    gaji untuk selain karyawan),
4. Tekan tombol "Generate" di bawah untuk
    menyimpan softfile slip gaji.''')

if __name__ == '__main__':
    vp_start_gui()





