#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 10, 2020 02:00:51 PM +07  platform: Windows NT

import sys
import re

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main
import data.gui.setting.Setting
import data.gui.browse.Browse
import data.util.pdfgenerator

def set_Tk_var():
    global LabelStatusVar
    LabelStatusVar = tk.StringVar()
    if (len(main.resData) == 0):
        LabelStatusVar.set('Program completely initialized.')
    else:
        LabelStatusVar.set('File loaded and ready to be generated.')
    global LabelPathFileVar
    LabelPathFileVar = tk.StringVar()
    if (len(main.resData) == 0):
        LabelPathFileVar.set('<<<   Cari file absensi di sini')
    else:
        LabelPathFileVar.set(simplifiedPathName(main.resData[0]))
    global TCheckboxMiniSlipVar
    TCheckboxMiniSlipVar = tk.BooleanVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def tButtonSettingImageCommand():
    LabelStatusVar.set('Setting opened.')
    # Menutup halaman start ATAU mencari cara agar dapat berjalan multiwindow
    destroy_window()
    # Membuka halaman setting
    data.gui.setting.Setting.vp_start_gui()

def tButtonOpenFileCommand():
    # Menutup halaman start
    LabelStatusVar.set('File loaded and ready to be generated.')
    destroy_window()
    # Membuka halaman openfiledialog dan halaman memilih daftar karyawan yg ingin digenerate
    data.gui.browse.Browse.vp_start_gui()

def tButtonGenerateCommand():
    # Memanggil fungsi generate pdf
    if (len(main.resData) != 0):
        data.util.pdfgenerator.generateMultiSlip(main.resData, TCheckboxMiniSlipVar.get())
    else:
        LabelStatusVar.set('Data not found, select the data first.')
    
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def simplifiedPathName(path):
    shortPath = re.split(r'[/\\]', path)[len(re.split(r'[/\\]', path))-1]
    return shortPath