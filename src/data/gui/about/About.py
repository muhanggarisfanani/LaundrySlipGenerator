#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 13, 2020 11:23:35 PM +07  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import data.gui.about.About_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = AboutWindow (root)
    data.gui.about.About_support.init(root, top)
    root.mainloop()

w = None
def create_AboutWindow(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_AboutWindow(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = AboutWindow (w)
    data.gui.about.About_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_AboutWindow():
    global w
    w.destroy()
    w = None

class AboutWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#ffffff'  # X11 color: 'white'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font13 = "-family {Segoe UI} -size 10"
        font9 = "-family {Segoe UI} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x720+5+5")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("About")
        top.configure(background="#ffffff")

        self.TLabelTitle = ttk.Label(top)
        self.TLabelTitle.place(relx=0.2, rely=0.028, height=144, width=355)
        self.TLabelTitle.configure(background="#ffffff")
        self.TLabelTitle.configure(foreground="#000000")
        self.TLabelTitle.configure(font=font9)
        self.TLabelTitle.configure(relief="flat")
        self.TLabelTitle.configure(anchor='w')
        self.TLabelTitle.configure(justify='left')
        photo_location = os.path.join(prog_location,"data/gui/about/img/about.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.TLabelTitle.configure(image=_img0)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.217, rely=0.25, relwidth=0.567)

        self.TFrameInfo = ttk.Frame(top)
        self.TFrameInfo.place(relx=0.1, rely=0.319, relheight=0.353
                , relwidth=0.808)
        self.TFrameInfo.configure(relief='groove')
        self.TFrameInfo.configure(borderwidth="2")
        self.TFrameInfo.configure(relief="groove")
        self.TFrameInfo.configure(cursor="arrow")

        self.TLabelName = ttk.Label(self.TFrameInfo)
        self.TLabelName.place(relx=0.041, rely=0.039, height=34, width=195)
        self.TLabelName.configure(background="#ffffff")
        self.TLabelName.configure(foreground="#000000")
        self.TLabelName.configure(font=font13)
        self.TLabelName.configure(relief="flat")
        self.TLabelName.configure(anchor='w')
        self.TLabelName.configure(justify='left')
        self.TLabelName.configure(text='''~ Salary Slip Generator ~''')

        self.TSeparator2 = ttk.Separator(self.TFrameInfo)
        self.TSeparator2.place(relx=0.058, rely=0.217, relwidth=0.375)

        self.TLabel1 = ttk.Label(self.TFrameInfo)
        self.TLabel1.place(relx=0.062, rely=0.236, height=184, width=425)
        self.TLabel1.configure(background="#ffffff")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font=font9)
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Version
    ~ ver1.0
Publish Date
    ~ 30 April 2020
Owner
    ~ Tropical Laundry Sangkuriang | KAM ITB BP3
Author
    ~ Muhammad Angga Risfanani''')

        self.TButtonBack = ttk.Button(top)
        self.TButtonBack.place(relx=0.733, rely=0.889, height=30, width=98)
        self.TButtonBack.configure(command=data.gui.about.About_support.TButtonBackCommand)
        self.TButtonBack.configure(takefocus="")
        self.TButtonBack.configure(text='''Back''')

        self.TLabelContact = ttk.Label(top)
        self.TLabelContact.place(relx=0.1, rely=0.722, height=24, width=485)
        self.TLabelContact.configure(background="#ffffff")
        self.TLabelContact.configure(foreground="#000000")
        self.TLabelContact.configure(font=font9)
        self.TLabelContact.configure(relief="flat")
        self.TLabelContact.configure(anchor='w')
        self.TLabelContact.configure(justify='left')
        self.TLabelContact.configure(text='''Any problem with this software? or suggestion? Feel free to contact us.''')

        self.TButtonContact = ttk.Button(top)
        self.TButtonContact.place(relx=0.1, rely=0.778, height=30, width=128)
        self.TButtonContact.configure(command=data.gui.about.About_support.TButtonContactCommand)
        self.TButtonContact.configure(takefocus="")
        self.TButtonContact.configure(text='''Contact Us''')
